; Copyright 2010 Jens Thiede. All rights reserved.
; Use of this source code is governed by a BSD-style
; license that can be found in the license.txt file
; in the root directory of this project.

(in-package :lispdoc)

(defclass miner-test (test-case)
  ())

(def-test-method test-get-sexp ((test miner-test))
  (assert-equal '(:foo :bar)
		(get-sexp :foo '(:a :b (:foo :bar) :d)))
  (assert-equal '((:foo :bar) :a :b)
		(setf (get-sexp :foo '((:foo :baz) :a :b)) '(:foo :bar)))) 

(def-test-method mine-package-test ((test miner-test))
  (let ((*doc-tree* (copy-seq *doc-tree*)))
    (mine-package '(defpackage :foo 
		    (:documentation "Reads minds.")
		    (:use :common-lisp)
		    (:shadow 'in-package)
		    (:size 30)))
    (assert-equal '(:foo
		    (:documentation "Reads minds.")
		    (:use :common-lisp)
		    (:shadow 'in-package)
		    (:size 30))
                  (get-sexp :foo (get-sexp :packages *doc-tree*)))))

(def-test-method mine-class-or-condition-test ((test miner-test))
  (let ((*doc-tree* (copy-seq *doc-tree*)))
    (mine-class-or-condition '(defclass bar ()
			       ((variable-a :initarg "foo")
				variable-b)
			       (:default-init-args . whatever)
			       (:documentation "Reads minds.")))
    (assert-equal '(:bar (:package :cl-user)
                         (:super-types)
		         (:default-init-args . whatever)
                         (:documentation "Reads minds."))
                  (get-sexp :bar (get-sexp :classes *doc-tree*)))
    (mine-class-or-condition '(define-condition condition (error)
			       ((variable-a :initarg "foo")
				variable-b)
			       (:documentation "Reads minds.")
			       (:report (stuff))))
    (assert-equal '(:condition (:package :cl-user)
                               (:super-types error)
                               (:documentation "Reads minds.")
		               (:report (stuff)))
                  (get-sexp :condition (get-sexp :conditions *doc-tree*)))))

(def-test-method mine-macro-or-function-test ((test miner-test))
  (let ((*doc-tree* (copy-seq *doc-tree*)))
    (mine-macro-or-function '(defun function-a (var-1 var-2)
			      "Reads minds"
			      (not (null t))))
    (assert-equal '(:function-a (:package :cl-user)
		                (:arguments var-1 var-2)
                                (:documentation "Reads minds"))
                  (get-sexp :function-a (get-sexp :functions *doc-tree*)))
    (mine-macro-or-function '(defun function-b (var-1 var-2)
			      (not (null t))))
    (assert-equal '(:function-b (:package :cl-user)
                                (:arguments var-1 var-2))
                  (get-sexp :function-b (get-sexp :functions *doc-tree*)))
    (mine-macro-or-function '(defmacro macro-a (var-1 var-2)
			      "Reads minds"
			      (not (null t))))
    (assert-equal '(:macro-a (:package :cl-user)
                             (:arguments var-1 var-2)
                             (:documentation "Reads minds"))
                  (get-sexp :macro-a (get-sexp :macros *doc-tree*)))))

(def-test-method mine-generic-test ((test miner-test))
  (let ((*doc-tree* (copy-seq *doc-tree*)))
    (mine-generic '(defgeneric generic (var-1 var-2)
                    (:documentation "Reads minds")))
    (assert-equal '(:generic (:package :cl-user)
                             (:arguments var-1 var-2)
                             (:documentation "Reads minds"))
                  (get-sexp :generic (get-sexp :generic-functions *doc-tree*)))))

(def-test-method mine-method-test ((test miner-test))
  (let ((*doc-tree* (copy-seq *doc-tree*)))
    (mine-method '(defmethod method-a (foo bar)
                   "Reads minds"
                   (not (null t))))
    (assert-equal '(:method-a (:package :cl-user)
                              (:arguments foo bar)
		              (:setf-method nil)
                              (:documentation "Reads minds"))
                  (get-sexp :method-a (get-sexp :methods *doc-tree*)))
    (mine-method '(defmethod method-b :after (foo bar)
                   "Reads minds"
                   (not (null t))))
    (assert-equal '(:method-b (:package :cl-user)
                              (:method-qualifiers :after)
                              (:arguments foo bar)
                              (:setf-method nil)
                              (:documentation "Reads minds"))
                  (get-sexp :method-b (get-sexp :methods *doc-tree*)))
    (mine-method '(defmethod (setf method-c) :after (foo bar)
                   "Reads minds"
                   (not (null t))))
    (assert-equal '(:method-c (:package :cl-user)
                              (:method-qualifiers :after)
                              (:arguments foo bar)
                              (:setf-method t)
                              (:documentation "Reads minds"))
                  (get-sexp :method-c (get-sexp :methods *doc-tree*)))))

(def-test-method test-parse-doc-tree ((test miner-test))
  (parse-doc-tree (list (asdf:system-relative-pathname
			 :lispdoc
			 #P"tests/subjects/subject_01.lisp"))))